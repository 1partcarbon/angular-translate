@ngdoc overview
@name Использование фильтра translate
@description

# Использование фильтра translate

В главе [Использование сервиса $translate](#/guide/03_using-translate-service) вы узнали как
использовать сервис `$translate` для перевода контента с зарегистрированными идентификаторами
перевода. Конечно, круто, что это работает, но вы, скорее всего, не захотите сильно привязывать
переводы к контроллерам и сервисам. В основном вы хотите переводить ваш контент на уровне 
представления, потому, что именно к нему это все относится.

angular-translate предоставляет фильтр, с помощью которого вы можете переводить ваши идентификаторы
перевода на уровне представления, не расказывая о них вашим контроллерам и сервисам. Это значит, что
вы можете выделить логику переводов из контроллера или сервиса и сделать свое представление 
заменяемым без изменений в коде бизнес логики.

### Общее использование
Использовать фильтры в Angular достаточно просто. Вы можете прочитать все о фильтрах Angular
[тут](http://docs.angularjs.org/guide/dev_guide.templates.filters.using_filters).

То же относится и к фильтру `translate` модуля angular-translate. Мы можем обновить наш пример из
главы [Использование сервиса $translate](#/guide/03_using-translate-service#generalusage)
перенеся логику из контроллера на уровень представления. Вцелом, фильтр `translate` работает так:

```
<ANY>{{ TRANSLATION_ID | translate }}</ANY>
```

Итак, для того, чтобы обновить наш пример, мы отказываемся от использования сервиса `$translate` в
контроллере и добавляем логику в наш уровень представления, используя фильтр `translate` так:

<pre>
<h1>{{'HEADLINE' | translate}}</h1>
<p>{{'PARAGRAPH' | translate}}</p>
</pre>

Очень просто, да? И, конечно же, вы можете посмотреть работающий пример ниже:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider.translations(translations);
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{ 'HEADLINE' | translate }}</h1>
      <p>{{ 'PARAGRAPH' | translate }}</p>
    </div>
  </doc:source>
</doc:example>

Отлично! Теперь вы можете переводить контент на уровне представления не засоряя ваши контроллеры 
логикой переводов. Весь процес перевода отделен от бизнес логики, что делает ваше приложение гораздо
более гибким, если понадобится заменить представление! Следующая глава покажет вам как добиться того
же с помощью предоставляемой директивы `translate`.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
