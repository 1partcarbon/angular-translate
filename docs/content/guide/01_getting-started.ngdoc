@ngdoc overview
@name Getting Started
@description

# Getting Started

To get started, simply inject <code>angular-translate</code> as dependency into your module.
This gives you access to all components <code>angular-translate</code> comes with.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

### Configuring $translateProvider

<code>angular-translate</code> comes with a <code>$translateProvider</code> you can use to
configure the i18n handling in your app at <code>config()</code> phase.
<code>$translateProvider</code> is used to teach your app different languages and e.g.
tell your app which language to use etc.

Teaching your app a language with <code>$translateProvider</code> is pretty easy.
Just inject it in your module configuration and make use of the <code>translations()</code>
method.

<pre>
angular.module('myApp', ['pascalprecht.translate'], ['$translateProvider', function ($translateProvider) {

  // register translation table
  $translateProvider.translations({
    'HEADLINE_TEXT':'Hey Guys, this is a headline!',
    'SOME_TEXT': 'A text anywhere in the app.'
  });

}]);
</pre>

You can register a translation table just by passing an object hash where a key
represents a translation id and a value the concrete translation. In the example above
there are two registered translations, <code>HEADLINE_TEXT</code> and <code>SOME_TEXT</code>.

**[&rarr; View Plunker](http://plnkr.co/edit/xk1ya8)**

#### Namespacing support
Since version `0.7.0` you're also able to use translation tables with namespaces. This could be pretty useful when having a complex organization of translations.

<pre>
 // register translation table
 $translateProvider.translations({
    'component1': {
       'HEADLINE_TEXT':'Hey Guys, this is a headline!'
    },
    'component2': {
       'SOME_TEXT': 'A text anywhere in the app.'
    }
 });
</pre>

### Using $translate service

<code>angular-translate</code> provides several ways to translate certain contents of
your app. One way is to use the provided <code>$translate</code> service directly.
You actually wouldn't use this approach, because you don't want to bind your apps
controllers and services too hard to your translated content. But just to show that
it's possible.

Simply inject the <code>$translate</code> service as you would do with others.

<pre>
angular.module('myApp').controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.translatedText = $translate('HEADLINE_TEXT');

}]);
</pre>

This service in actually beeing used module-wide in <code>angular-translate</code> to
translate translation id's. If you want to know what behavior you can expect from
<code>$translate</code> in specific cases, check out the [related tests](https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/translateSpec.js#L40-L60).

**[&rarr; View Plunker](http://plnkr.co/edit/D68BxJ)**

### Using translate filter

Most of the time you want to translate contents at view layer, since this is the place
where your contents are. This decouples the translate logic from your controllers and
services. <code>angular-translate</code> comes with a **filter** and a **directive** to
translate your contents.

You make use of <code>translateFilter</code> as follows:

<pre>
<h1>{{'HEADLINE_TEXT' | translate}}</h1>
<p>{{'SOME_TEXT' | translate}}</p>
</pre>

Pretty easy ha? And again, there is a [testsuite](https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/translateSpec.js#L310-L326)
which shows you how <code>translateFilter</code> behaves in certain cases.

**[&rarr; View Plunker](http://plnkr.co/edit/UUEmtf)**

### Using translate directive

Using <code>translateFilter</code> is great, but using <code>translateDirective</code> is better.
It turned out that having too many filters in a view sets up too many watch expressions,
which is why <code>angular-translate</code> also provides a directive to translate your
contents in view layer.

You can use <code>translateDirective</code> in many different ways, here is one possible
way:

<pre>
<h1 translate>HEADLINE_TEXT</h1>
<p translate>SOME_TEXT</p>
</pre>

You can also pass translation id's as attribute values:

<pre>
<h1 translate="HEADLINE_TEXT"></h1>
<p translate="SOME_TEXT"></p>
</pre>

And there is [so much more possible](https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/translateDirectiveSpec.js)!

**[&rarr; View Plunker](http://plnkr.co/edit/6of2GK)**
