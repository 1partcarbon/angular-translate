@ngdoc overview
@name Almacenamientos personalizados
@description

# Almacenamientos personalizados

Si leyó [Almacenamientos](#/guide/10_storages), usted sabe ahora cómo usar
cookiesStorage, o localStorage, para que su aplicación recuerde el último lenguaje elegido a lo largo de varios llamados o "requests" http. Si ni localStorage ni cookieStorage son adecuados para sus necesidades, usted puede construir y usar su propio servicio de almacenamiento.

## Contruir un servicio de almacenamiento personalizado

Si usted quiere usar un servicio de almacenamiento personalizado en su aplicación, tiene que constuirlo implementando ciertos métodos, de manera que angular-translate pueda usarlo. La interfaz para un almacenamiento es bastante sencilla, lo único que hay que proveer son los métodos  `put()` y `get()` de un sistema de almacenamiento propio.

Digamos que usted quiere usar un servicio de almacenamiento personalizado en nuestra aplicación de ejemplo. Podemos fácilmente extenderla con un nuevo servicio. Sólo tenemos que asegurarnos de devolver un objeto con los métodos `get()` y `put()` method. Dicho servicio personalizado puede ser algo así:

<pre>
app.factory('almacenamientoPersinalizado', function () {
  return {
    put: function (nombre, valor) {
      // almacenar `valor` bajo  `nombre` de alguna manera
    },
    get: function (name) {
      // pedir el valor de `nombre` de alguna manera
    }
  };
});
</pre>

Fácil ¿verdad? Como se puede ver, `put()`  espera 2 argumentos: un par clave-valor. Por otra parte,  `get()` requiere sólo una clave, y devuelve el valor. Proveer un almacenamiento personalizado como servicio separado brinda gran flexibilidad, por ejemplo si se quiere usar este servicio en algún otro contexto. Además es bastante fácil de testeas, dado que está aislado.

## Usar el servicio personalizado de almacenamiento

Una vez que haya construido su servicio personalizado de almacenamiento, tiene que indicarla a angular-translate que lo use. Los métodos de `$translateProvider` llamados `useCookieStorage()` y
`useLocalStorage()` son, en realidad, atajos que usan
`useStorage()` internamente. También este último método puede usarse para informarle a angular-translate acerca de nuestro almacenamiento personalizado:

<pre>
$translateProvider.useStorage('customStorage');
</pre>

angular-translate usará `$injector` para obtener una isntancia de la "factory" por su nombre, el cual en nuestro caso es `almacenamientoPersonalizado`, y luego será capaz de acceder a los métodos de ésta en tiempo de ejecución, para almacenar el último idioma elegido.


<doc:example module="myApp">
  <doc:source>
    <script>
		var translationsEN = {
		  ENCABEZADO: 'What an awesome module!',
		  PARRAFO: 'Srsly!',
		  PASADO_COMO_TEXTO: 'Hey there! I\'m passed as text value!',
		  PASADO_COMO_ATRIBUTO: 'I\'m passed as attribute value, cool ha?',
		  PASADO_COMO_INTERPOLACION: 'Beginners! I\'m interpolated!',
		  REEMPLAZO_DE_VARIABLE: 'Hi {{nombre}}',
		  BOTON_LENGUAJE_ES: 'Spanish',
		  BOTON_LENGUAJE_EN: 'English'
		};

		var translationsES= {
		  ENCABEZADO: '¡Qué módulo asombroso!',
		  PARRAFO: '¡En serio!',
		  PASADO_COMO_TEXTO: 'Hola, me están pasando como un texto',
		  PASADO_COMO_ATRIBUTO: 'Me están pasando como atributo, ¡qué bueno!',
		  PASADO_COMO_INTERPOLACION: '¡Aprendices! A mí me están interpolando ...'
		  REEMPLAZO_DE_VARIABLE: 'Hola {{nombre}}',
		  BOTON_LENGUAJE_ES: 'Español',
		  BOTON_LENGUAJE_EN: 'Inglés'
		};

		var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

		app.config(['$translateProvider', function ($translateProvider) {
		  // agregar las tablas de traducción
		  $translateProvider.translations('en', translationsEN);
		  $translateProvider.translations('es', translationsES);
		  $translateProvider.preferredLanguage('en');
		  // recordar el idioma
		  $translateProvider.useLocalStorage();
		}]);

		app.factory('almacenamientoPersonalizado', function () {
		  return {
			  put: function (name, value) {
				// almacenar `valor` bajo  `nombre` de alguna manera
			  },
			  get: function (name) {
				// pedir el valor de `nombre` de alguna manera
			  }
		  };
		});

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'ENCABEZADO' | translate }}</p>
      <p>{{ 'PARRRAFO' | translate }}</p>
      
      <p translate>PASADO_COMO_TEXTO</p>
      <p translate="PASADO_COMO_ATRIBUTO"></p>
      <p translate>{{ 'PASADO_COMO_INTERPOLACION' }}</p>
      <p translate="{{ 'PASADO_COMO_INTERPOLACION' }}"></p>
      <p translate="REEMPLAZO_DE_VARIABLE" translate-values="{ nombre: 'PascalPrecht'}"></p>

      <button ng-click="changeLanguage('es')" translate="BOTON_LENGUAJE_ES"></button>
      <button ng-click="changeLanguage('en')" translate="BOTON_LENGUAJE_EN"></button>
    </div>
  </doc:source>
</doc:example>

Por supuesto, nuestro servicio personalizado de ejemplo no almacena nada, si usted lo utiliza en su navegador tal cual está, no recordará el lenguaje al refrescarlo.
<br>
<hr>
<center>Hecho con &hearts; de unicornio y con amor por [PascalPrecht](http://github.com/PascalPrecht)</center>
