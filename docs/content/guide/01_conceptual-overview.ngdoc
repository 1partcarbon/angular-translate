@ngdoc overview
@name Conceptual Overview
@description

# Conceptual Overview

The following figure shows in a little abstract way how angular-translate is
structured and how the different components it provides, are actually connected.

<img class="pull-right" style="padding-left: 3em;" src="img/guide/conceptual_overview.png">

## The nitty-gritty
As you can see, angular-translate provides a directive and a filter as components
you can use to translate your apps content. The directive appears on top of the
filter component because it makes use of it internally.

In the next layer it gets a bit more interesting. Both, the directive and the
filter use the `$tranlsate` service. Which means, when translating contents of
your app with a directive, you're actually doing it with the filter, which actually
does it with the service. This also means, you can not only translate your
contents in the view layer in a declarative way, but also (of course only if
needed) in a business logic layer like a controller or another service.

Within the `$translate` service you can see some sub components which are used
by it to translate your contents. We'll get into this in a more detail later
but nevertheless its good to get an overview of what's actually happening there.

### Interpolators
The right box represents possible interpolation services `$translate` service uses
to interpolate your translations against variable values you might wanna use
there. If you don't understand what this means, no worries. You'll learn everything
you need to know about interpolators later. However, interpolation services are
decoupled from the main core, which means, you can install'em as extra packages,
or to be honest, you have to make sure that at least one interpolation service
is present when running an app with angular-translate.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
